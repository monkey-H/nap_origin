#/bin/bash
set -x

GITDIR=/home/nap/gits
APPDIR=/home/nap/apps
WORKDIR=/etc/systemd/system
APP=$1
REGISTRY="docker.iwanna.xyz:5000/hmonkey"

touch $APPDIR/$APP/Dockerfile
sudo chmod o+w $APPDIR/$APP/Dockerfile

sudo touch $WORKDIR/image_${APP}.service
sudo chmod o+w $WORKDIR/image_${APP}.service
SLAVES_IMAGE="${WORKDIR}/image_${APP}.service"

sudo touch $WORKDIR/slaves_${APP}@.service
sudo chmod o+w $WORKDIR/slaves_${APP}@.service
SLAVE_CONTAINERS="$WORKDIR/slaves_${APP}@.service"

sudo touch $WORKDIR/discovery_${APP}@.service
sudo chmod o+w $WORKDIR/discovery_${APP}@.service
DISCOVERY="${WORKDIR}/discovery_${APP}@.service"

sudo touch $WORKDIR/master_${APP}.service
MASTER_CONTAINER="${WORKDIR}/master_${APP}.service"
sudo chmod o+w $MASTER_CONTAINER

while read line; do
        key=$(echo $line | cut -f 1 -d ' ')
        str=""
        value=$(echo ${line/$key/$str})
        case $key in
                from:)
                        FROM=$value
                ;;
                to:)
                        TO=$value 
                ;;
                hosts:)
                        HOSTS=$value
                ;;
                *)
                        echo "other settings"
        esac
done < $APPDIR/$APP/mpi.xml

cd /$APPDIR/$APP
cat > $APPDIR/$APP/Dockerfile <<EOF
FROM docker.iwanna.xyz:5000/hmonkey/openmpi
MAINTAINER hmonkey <5681713@qq.com>
COPY src /app
WORKDIR /app
RUN mpicc $FROM -o $TO
EOF

cat > ${SLAVES_IMAGE} <<EOF
[Unit]
Description=images
Requires=docker.service
After=docker.service

[Service]
TimeoutStartSec=900m
ExecStartPre=/usr/bin/docker build -t $REGISTRY/${APP}_image $APPDIR/$APP
ExecStart=/usr/bin/docker push $REGISTRY/${APP}_image

[Install]
WantedBy=multi-user.target
EOF


cd $WORKDIR
sudo systemctl enable image_${APP}.service
sudo systemctl start image_${APP}.service

cat > ${SLAVE_CONTAINERS} <<EOF
[Unit]
Description=slave containers
Requires=docker.service
After=docker.service

[Service]
TimeoutStartSec=900m
ExecStartPre=-/usr/bin/docker stop ${APP}_slave%i
ExecStartPre=-/usr/bin/docker rm ${APP}_slave%i
ExecStartPre=-/usr/bin/docker pull $REGISTRY/${APP}_image
ExecStart=/usr/bin/docker run -P --name ${APP}_slave%i $REGISTRY/${APP}_image /usr/sbin/sshd -D
ExecStop=/usr/bin/docker stop ${APP}_slave%i
ExecStopPost=-/usr/bin/docker rm ${APP}_slave%i

EOF

fleetctl destroy ${SLAVE_CONTAINERS}

fleetctl submit ${SLAVE_CONTAINERS}

for ((i=1; i<=$HOSTS; ++i))
do
	fleetctl destroy slaves_${APP}@$i.service > /dev/null
	fleetctl start slaves_${APP}@$i.service > /dev/null
done

cat > ${DISCOVERY} << EOF
[Unit]
Description=${APP}_discovery
BindsTo=slaves_${APP}@%i.service
After=slaves_${APP}@%i.service

[Service]
ExecStart=/bin/sh -c "while true; do appip=\$(docker inspect --format='{{.NetworkSettings.IPAddress}}' ${APP}_slave%i); etcdctl set /services/mpi/$APP/slaves/slave%i \$appip --ttl 60; sleep 30; done"
ExecStop=/usr/bin/etcdctl rm /services/mpi/$APP/slaves/slave%i

[X-Fleet]
MachineOf=slaves_${APP}@%i.service
EOF

fleetctl destroy ${DISCOVERY}

fleetctl submit ${DISCOVERY}

for ((i=1; i<=$HOSTS; ++i))
do
        fleetctl destroy discovery_${APP}@$i.service > /dev/null
        fleetctl start discovery_${APP}@$i.service > /dev/null
done

sleep 45

HOSTLIST=$(etcdctl get services/mpi/$APP/slaves/slave1)
for ((i=2; i<=$HOSTS; ++i))
do
	HOST=$(etcdctl get services/mpi/$APP/slaves/slave$i)
	HOSTLIST="${HOSTLIST},${HOST}"
done

cat > ${MASTER_CONTAINER} <<EOF
[Unit]
Description=master container
Requires=docker.service
After=docker.service

[Service]
TimeoutStartSec=900m
ExecStartPre=-/usr/bin/docker stop ${APP}_master
ExecStartPre=-/usr/bin/docker rm ${APP}_master
ExecStartPre=-/usr/bin/docker pull $REGISTRY/${APP}_image
ExecStart=/usr/bin/docker run -P --name ${APP}_master $REGISTRY/${APP}_image /bin/bash -c "service ssh start && cd /app && mpirun --host $HOSTLIST $TO > /dev/null && /usr/sbin/sshd -D"
ExecStartPost=-/usr/bin/etcdctl set services/mpi/$APP/master \$(docker inspect --format='{{.NetworkSettings.IPAddress}}' ${APP}_master)
ExecStop=/usr/bin/docker stop ${APP}_master
ExecStopPost=-/usr/bin/docker rm ${APP}_master
ExecStopPost=-/usr/bin/etcdctl rm services/mpi/$APP/master

EOF

cd $WORKDIR
fleetctl destroy master_${APP}.service
fleetctl submit master_${APP}.service
fleetctl start master_${APP}.service

