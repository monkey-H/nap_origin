#!/bin/bash

APP=$1
username=$(echo $APP | cut -d "_" -f 1)
USERAPPDIR=/home/nap/apps/$username/$APP
WORKDIR=/etc/systemd/system
REGISTRY="docker.iwanna.xyz:5000/hmonkey"

touch $USERAPPDIR/Dockerfile
sudo chmod o+w $USERAPPDIR/Dockerfile

sudo touch $WORKDIR/image_${APP}.service
sudo chmod o+w $WORKDIR/image_${APP}.service
SLAVES_IMAGE="${WORKDIR}/image_${APP}.service"

sudo touch $WORKDIR/${APP}_slaves@.service
sudo chmod o+w $WORKDIR/${APP}_slaves@.service
SLAVE_CONTAINERS="$WORKDIR/${APP}_slaves@.service"

sudo touch $WORKDIR/discovery_${APP}@.service
sudo chmod o+w $WORKDIR/discovery_${APP}@.service
DISCOVERY="${WORKDIR}/discovery_${APP}@.service"

sudo touch $WORKDIR/${APP}_master.service
MASTER_CONTAINER="${WORKDIR}/${APP}_master.service"
sudo chmod o+w $MASTER_CONTAINER

sudo touch $WORKDIR/discovery_${APP}_master.service
DISCOVERY_MASTER="${WORKDIR}/discovery_${APP}_master.service"
sudo chmod o+w $DISCOVERY_MASTER

while read line; do
        key=$(echo $line | cut -f 1 -d ' ')
        str=""
        value=$(echo ${line/$key/$str})
        case $key in
                build:)
                        MPICC=$value
                ;;
                run:)
                        MPIRUN=$value 
                ;;
                *)
                        echo "other settings"
        esac
done < $USERAPPDIR/mpi.xml

if [ -z "$MPICC" ]; then
cat > $USERAPPDIR/Dockerfile <<EOF
FROM docker.iwanna.xyz:5000/hmonkey/mpi4py:v4
MAINTAINER hmonkey <5681713@qq.com>
COPY src /app
WORKDIR /app
EOF
else
cat > $USERAPPDIR/Dockerfile <<EOF
FROM docker.iwanna.xyz:5000/hmonkey/mpi4py:v4
MAINTAINER hmonkey <5681713@qq.com>
COPY src /app
WORKDIR /app
RUN $MPICC
EOF
fi

cat > ${SLAVES_IMAGE} <<EOF
[Unit]
Description=images
Requires=docker.service
After=docker.service

[Service]
TimeoutStartSec=900m
ExecStartPre=/usr/bin/docker build -t $REGISTRY/${APP}_image $USERAPPDIR
ExecStart=/usr/bin/docker push $REGISTRY/${APP}_image

[Install]
WantedBy=multi-user.target
EOF


cd $WORKDIR
sudo systemctl enable image_${APP}.service
sudo systemctl start image_${APP}.service

cat > ${SLAVE_CONTAINERS} <<EOF
[Unit]
Description=slave containers
Requires=docker.service
After=docker.service

[Service]
TimeoutStartSec=900m
ExecStartPre=-/usr/bin/docker stop ${APP}_slave%i
ExecStartPre=-/usr/bin/docker rm ${APP}_slave%i
ExecStartPre=-/usr/bin/docker pull $REGISTRY/${APP}_image
ExecStart=/usr/bin/docker run -P --name ${APP}_slave%i $REGISTRY/${APP}_image /bin/bash -c "service ssh start && cd /tmp && /shellinabox/shellinaboxd" 
ExecStop=/usr/bin/docker stop ${APP}_slave%i
ExecStopPost=-/usr/bin/docker rm ${APP}_slave%i

EOF

fleetctl destroy ${SLAVE_CONTAINERS}
fleetctl submit ${SLAVE_CONTAINERS}

i="2"
HOSTS=1
while [ ! -z "$(echo $MPIRUN | cut -d "-" -f $i)" ]
do
	if [ "$(echo $MPIRUN | cut -d "-" -f $i | cut -d " " -f 1)" = "n" ]; then
		HOSTS="$(echo $MPIRUN | cut -d "-" -f $i | cut -d " " -f 2)"
	fi
	i=$[$i+1]
done

for ((i=1; i<=$HOSTS; ++i))
do
	fleetctl destroy ${APP}_slaves@$i.service > /dev/null
	fleetctl start ${APP}_slaves@$i.service > /dev/null
done

cat > ${DISCOVERY} << EOF
[Unit]
Description=${APP}_discovery
BindsTo=${APP}_slaves@%i.service
After=${APP}_slaves@%i.service

[Service]
ExecStart=/bin/sh -c "while true; do appport=\$(docker inspect --format='{{(index (index .NetworkSettings.Ports \"4200/tcp\") 0).HostPort}}' ${APP}_slave%i); appip=\$(docker inspect --format='{{.NetworkSettings.IPAddress}}' ${APP}_slave%i); etcdctl set /services/port/$APP/slaves/slave%i \$appport --ttl 60; etcdctl set /services/mpi/$APP/slaves/slave%i \$appip --ttl 60; sleep 10; done"
ExecStop=/usr/bin/etcdctl rm /services/mpi/$APP/slaves/slave%i
ExecStopPost=/usr/bin/etcdctl rm /services/port/$APP/slaves/slave%i

[X-Fleet]
MachineOf=${APP}_slaves@%i.service
EOF

fleetctl destroy ${DISCOVERY}
fleetctl submit ${DISCOVERY}

for ((i=1; i<=$HOSTS; ++i))
do
        fleetctl destroy discovery_${APP}@$i.service > /dev/null
        fleetctl start discovery_${APP}@$i.service > /dev/null
done

sleep 20 

HOSTLIST="--host $(etcdctl get services/mpi/$APP/slaves/slave1)"
for ((i=2; i<=$HOSTS; ++i))
do
	HOST=$(etcdctl get services/mpi/$APP/slaves/slave$i)
	HOSTLIST="${HOSTLIST},${HOST}"
done

BEFORE="-n $HOSTS"
MPIRUN=${MPIRUN/$BEFORE/$HOSTLIST}

cat > ${MASTER_CONTAINER} <<EOF
[Unit]
Description=master container
Requires=docker.service
After=docker.service

[Service]
TimeoutStartSec=900m
ExecStartPre=-/usr/bin/docker stop ${APP}_master
ExecStartPre=-/usr/bin/docker rm ${APP}_master
ExecStartPre=-/usr/bin/docker pull $REGISTRY/${APP}_image
ExecStart=/usr/bin/docker run -P --name ${APP}_master $REGISTRY/${APP}_image /bin/bash -c "service ssh start && cd /app && $MPIRUN && cd /tmp && /shellinabox/shellinaboxd"
ExecStop=/usr/bin/docker stop ${APP}_master

EOF

cd $WORKDIR
fleetctl destroy ${APP}_master.service
fleetctl submit ${APP}_master.service
fleetctl start ${APP}_master.service

cat > ${DISCOVERY_MASTER} << EOF
[Unit]
Description=${APP} discovery master
BindsTo=${APP}_master.service
After=${APP}_master.service

[Service]
ExecStart=/bin/sh -c "while true; do appport=\$(docker inspect --format='{{(index (index .NetworkSettings.Ports "4200/tcp") 0).HostPort}}' ${APP}_master); etcdctl set /services/port/$APP/master \$appport --ttl 60; sleep 10; done"
ExecStop=/usr/bin/etcdctl rm /services/port/$APP/master

[X-Fleet]
MachineOf=${APP}_master.service
EOF

fleetctl destroy ${DISCOVERY_MASTER}
fleetctl submit ${DISCOVERY_MASTER}
